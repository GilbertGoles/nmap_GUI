#!/usr/bin/env python3
import sys
import os
import logging
from datetime import datetime
from PyQt6.QtWidgets import QApplication, QMessageBox
from PyQt6.QtCore import QTimer
from PyQt6.QtGui import QFont

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    log_file = os.path.join(log_dir, f"nmap_gui_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    logging.info("=" * 60)
    logging.info("üöÄ NMAP GUI Scanner Application Starting")
    logging.info("=" * 60)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        import subprocess
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ nmap
        result = subprocess.run(['nmap', '--version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            logging.info(f"‚úÖ Nmap found: {result.stdout.splitlines()[0] if result.stdout else 'Unknown version'}")
            return True
        else:
            logging.warning("‚ö†Ô∏è Nmap might not be properly installed")
            return False
    except (subprocess.SubprocessError, FileNotFoundError) as e:
        logging.error(f"‚ùå Nmap not found in system PATH: {e}")
        return False

def check_python_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        from PyQt6 import QtCore, QtWidgets, QtGui
        logging.info(f"‚úÖ PyQt6 version: {QtCore.PYQT_VERSION_STR}")
        
        import psutil
        logging.info(f"‚úÖ psutil version: {psutil.__version__}")
        
        return True
    except ImportError as e:
        logging.error(f"‚ùå Missing Python dependency: {e}")
        return False

def setup_application_paths():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º –≤ PYTHONPATH
    modules_to_add = [
        script_dir,
        os.path.join(script_dir, 'core'),
        os.path.join(script_dir, 'shared'),
        os.path.join(script_dir, 'modules'),
        os.path.join(script_dir, 'gui')
    ]
    
    for path in modules_to_add:
        if path not in sys.path:
            sys.path.insert(0, path)
            logging.debug(f"üìÅ Added to path: {path}")

def handle_exception(exc_type, exc_value, exc_traceback):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if issubclass(exc_type, KeyboardInterrupt):
        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º KeyboardInterrupt
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    logging.critical(
        "üí• Uncaught exception",
        exc_info=(exc_type, exc_value, exc_traceback)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        app = QApplication.instance()
        if app:
            error_msg = f"Critical error occurred:\n\n{str(exc_value)}\n\nCheck logs for details."
            QMessageBox.critical(None, "Application Error", error_msg)
    except:
        pass  # –ï—Å–ª–∏ QApplication –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    sys.excepthook = handle_exception
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    setup_application_paths()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    logger.info("üîç Checking dependencies...")
    
    if not check_dependencies():
        app = QApplication(sys.argv)
        QMessageBox.critical(
            None,
            "Dependency Error",
            "Nmap not found in system PATH.\n\n"
            "Please install nmap to use this application:\n"
            "‚Ä¢ Windows: Download from https://nmap.org/download.html\n"
            "‚Ä¢ Linux: sudo apt-get install nmap\n"
            "‚Ä¢ macOS: brew install nmap"
        )
        return 1
    
    if not check_python_dependencies():
        app = QApplication(sys.argv)
        QMessageBox.critical(
            None,
            "Dependency Error", 
            "Missing Python dependencies.\n\n"
            "Please install required packages:\n"
            "pip install PyQt6 psutil"
        )
        return 1
    
    logger.info("‚úÖ All dependencies satisfied")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        app = QApplication(sys.argv)
        app.setApplicationName("NMAP GUI Scanner")
        app.setApplicationVersion("1.0.0")
        app.setOrganizationName("NMAP GUI Project")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.setStyle('Fusion')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        default_font = QFont("Segoe UI", 10)
        app.setFont(default_font)
        
        logger.info("üñ•Ô∏è QApplication created successfully")
        
    except Exception as e:
        logger.critical(f"‚ùå Failed to create QApplication: {e}")
        return 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        logger.info("üì¶ Loading application modules...")
        
        from core.app_loader import ApplicationLoader
        
        loader = ApplicationLoader()
        main_window = loader.load_application()
        
        if main_window:
            logger.info("‚úÖ Application loaded successfully")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            main_window.show()
            logger.info("üëÄ Main window displayed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            logger.info("üîÑ Starting main event loop...")
            return_code = app.exec()
            
            logger.info(f"üîö Application finished with exit code: {return_code}")
            return return_code
            
        else:
            logger.error("‚ùå Failed to load application main window")
            QMessageBox.critical(
                None,
                "Application Error",
                "Failed to load application interface.\n\n"
                "Please check the log file for details."
            )
            return 1
            
    except ImportError as e:
        logger.critical(f"‚ùå Import error: {e}")
        QMessageBox.critical(
            None,
            "Import Error",
            f"Failed to import application modules:\n\n{str(e)}\n\n"
            "Please ensure all files are in the correct locations."
        )
        return 1
        
    except Exception as e:
        logger.critical(f"üí• Application crashed: {e}", exc_info=True)
        QMessageBox.critical(
            None,
            "Application Error",
            f"Application encountered a critical error:\n\n{str(e)}\n\n"
            "Please check the log file for details."
        )
        return 1

if __name__ == '__main__':
    exit_code = main()
    logging.info(f"üîö Application exit with code: {exit_code}")
    sys.exit(exit_code)
