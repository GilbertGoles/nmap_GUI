from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QLabel, QPushButton, 
                             QTextEdit, QHBoxLayout, QGroupBox, QComboBox,
                             QLineEdit, QCheckBox, QProgressBar, QGridLayout,
                             QMessageBox, QFrame)
from PyQt6.QtCore import Qt, pyqtSlot, QTimer
import logging

from core.event_bus import EventBus
from shared.models.scan_config import ScanConfig, ScanType, ScanIntensity  # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢

class ScanLauncherTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    
    def __init__(self, event_bus: EventBus, core_modules):
        super().__init__()
        self.event_bus = event_bus
        self.scan_manager = core_modules['scan_manager']
        self.logger = logging.getLogger(__name__)
        self.current_scan_id = None
        self.progress_timer = None
        self._setup_ui()
        self._connect_signals()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        main_layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("NMAP Scan Launcher")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 10px;")
        main_layout.addWidget(title)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        config_group = QGroupBox("Scan Configuration")
        config_layout = QGridLayout(config_group)
        
        row = 0
        
        # –¶–µ–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        config_layout.addWidget(QLabel("Targets:"), row, 0)
        self.targets_input = QLineEdit()
        self.targets_input.setPlaceholderText("e.g., 192.168.1.0/24, scanme.nmap.org, 10.0.0.1-100")
        self.targets_input.setText("scanme.nmap.org")
        config_layout.addWidget(self.targets_input, row, 1)
        row += 1
        
        # –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        config_layout.addWidget(QLabel("Scan Type:"), row, 0)
        self.scan_type_combo = QComboBox()
        self.scan_type_combo.addItems(["Quick", "Stealth", "Comprehensive", "Discovery", "Custom"])
        config_layout.addWidget(self.scan_type_combo, row, 1)
        row += 1
        
        # –£–†–û–í–ï–ù–¨ –ò–ù–¢–ï–ù–°–ò–í–ù–û–°–¢–ò - –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢
        config_layout.addWidget(QLabel("Scan Intensity:"), row, 0)
        self.intensity_combo = QComboBox()
        self.intensity_combo.addItems([
            "SAFE - Basic security checks", 
            "NORMAL - Standard security checks", 
            "AGGRESSIVE - Advanced vulnerability detection", 
            "PENETRATION - Full penetration testing"
        ])
        self.intensity_combo.setCurrentIndex(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SAFE
        self.intensity_combo.currentIndexChanged.connect(self._on_intensity_changed)
        config_layout.addWidget(self.intensity_combo, row, 1)
        row += 1
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        self.intensity_warning = QLabel("")
        self.intensity_warning.setWordWrap(True)
        self.intensity_warning.setStyleSheet("color: orange; font-weight: bold; padding: 5px;")
        self.intensity_warning.setVisible(False)
        config_layout.addWidget(self.intensity_warning, row, 0, 1, 2)
        row += 1
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        config_layout.addWidget(separator, row, 0, 1, 2)
        row += 1
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
        config_layout.addWidget(QLabel("Port Range:"), row, 0)
        self.port_range_input = QLineEdit()
        self.port_range_input.setPlaceholderText("e.g., 1-1000, 80,443,22,21")
        self.port_range_input.setText("1-1000")
        config_layout.addWidget(self.port_range_input, row, 1)
        row += 1
        
        # Timing template
        config_layout.addWidget(QLabel("Timing:"), row, 0)
        self.timing_combo = QComboBox()
        self.timing_combo.addItems(["T0 (Paranoid)", "T1 (Sneaky)", "T2 (Polite)", "T3 (Normal)", "T4 (Aggressive)", "T5 (Insane)"])
        self.timing_combo.setCurrentIndex(3)  # T3 Normal
        config_layout.addWidget(self.timing_combo, row, 1)
        row += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        config_layout.addWidget(QLabel("Options:"), row, 0)
        options_layout = QHBoxLayout()
        self.service_version_check = QCheckBox("Service Version")
        self.os_detection_check = QCheckBox("OS Detection")
        self.script_scan_check = QCheckBox("Script Scan")
        options_layout.addWidget(self.service_version_check)
        options_layout.addWidget(self.os_detection_check)
        options_layout.addWidget(self.script_scan_check)
        config_layout.addLayout(options_layout, row, 1)
        row += 1
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
        config_layout.addWidget(QLabel("Custom Command:"), row, 0)
        self.custom_command_input = QLineEdit()
        self.custom_command_input.setPlaceholderText("Custom nmap flags (for custom scan type)")
        config_layout.addWidget(self.custom_command_input, row, 1)
        
        main_layout.addWidget(config_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("Start Scan")
        self.start_btn.setStyleSheet("padding: 8px; font-size: 14px; background-color: #4CAF50; color: white;")
        
        self.stop_btn = QPushButton("Stop Scan")
        self.stop_btn.setStyleSheet("padding: 8px; font-size: 14px; background-color: #f44336; color: white;")
        self.stop_btn.setEnabled(False)
        
        buttons_layout.addWidget(self.start_btn)
        buttons_layout.addWidget(self.stop_btn)
        buttons_layout.addStretch()
        
        main_layout.addLayout(buttons_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        main_layout.addWidget(self.progress_bar)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
        log_group = QGroupBox("Scan Output")
        log_layout = QVBoxLayout(log_group)
        
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        self.log_output.setPlaceholderText("Scan logs will appear here...")
        log_layout.addWidget(self.log_output)
        
        main_layout.addWidget(log_group)
    
    def _on_intensity_changed(self, index):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
        warnings = {
            0: "",  # SAFE - –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            1: "‚ö†Ô∏è NORMAL: Standard security checks. Use for routine security assessments.",
            2: "üö® AGGRESSIVE: Advanced vulnerability detection. May trigger security systems. Requires client permission.",
            3: "üî¥ PENETRATION: Full penetration testing. Can disrupt services. REQUIRES WRITTEN AUTHORIZATION."
        }
        
        warning_text = warnings.get(index, "")
        self.intensity_warning.setText(warning_text)
        self.intensity_warning.setVisible(bool(warning_text))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º script scan –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        if index >= 2:  # AGGRESSIVE –∏ PENETRATION
            self.script_scan_check.setChecked(True)
    
    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        self.start_btn.clicked.connect(self._start_scan)
        self.stop_btn.clicked.connect(self._stop_scan)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.event_bus.scan_progress.connect(self._on_scan_progress)
        self.event_bus.scan_completed.connect(self._on_scan_completed)
        self.event_bus.scan_started.connect(self._on_scan_started)
        self.event_bus.scan_stopped.connect(self._on_scan_stopped)  # –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_type_combo.currentTextChanged.connect(self._update_ui_for_scan_type)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self._update_ui_for_scan_type(self.scan_type_combo.currentText())
    
    def _update_ui_for_scan_type(self, scan_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # 1. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ 'Custom'
        is_custom = (scan_type == "Custom")
        is_quick_or_discovery = (scan_type in ["Quick", "Discovery"])
        
        checks = [self.service_version_check, self.os_detection_check, self.script_scan_check]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        self.port_range_input.setEnabled(not is_quick_or_discovery)
        self.custom_command_input.setEnabled(is_custom)
        
        for check in checks:
            check.setEnabled(is_custom or (scan_type not in ["Quick", "Discovery", "Comprehensive"]))

        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º checked-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if scan_type == "Comprehensive":
            # –î–ª—è Comprehensive –≤–∫–ª—é—á–∞–µ–º Service Version, OS Detection –∏ Script Scan
            for check in checks:
                check.setChecked(True)
                check.setEnabled(False) # –î–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–±—Ä–∞–ª
        elif is_quick_or_discovery:
            # –î–ª—è Quick –∏ Discovery –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø—Ü–∏–∏
            for check in checks:
                check.setChecked(False)
                check.setEnabled(False)
        else:
            # –î–ª—è Custom –∏ Stealth (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ç—Ä–æ–ª—å
            pass
    
    def _start_scan(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            intensity_index = self.intensity_combo.currentIndex()
            if intensity_index >= 2:  # AGGRESSIVE –∏–ª–∏ PENETRATION
                reply = QMessageBox.warning(
                    self,
                    "Security Warning",
                    f"You are about to run an {self.intensity_combo.currentText().split(' - ')[0]} scan.\n\n"
                    "This may:\n"
                    "‚Ä¢ Trigger intrusion detection systems\n"
                    "‚Ä¢ Disrupt services\n"
                    "‚Ä¢ Be considered aggressive\n\n"
                    "Do you have proper authorization to proceed?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                    QMessageBox.StandardButton.No
                )
                if reply != QMessageBox.StandardButton.Yes:
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ UI
            targets_text = self.targets_input.text().strip()
            if not targets_text:
                QMessageBox.warning(self, "Error", "Please enter scan targets")
                return
            
            targets = [target.strip() for target in targets_text.split(',')]
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_type_map = {
                "Quick": ScanType.QUICK,
                "Stealth": ScanType.STEALTH,
                "Comprehensive": ScanType.COMPREHENSIVE,
                "Discovery": ScanType.DISCOVERY,
                "Custom": ScanType.CUSTOM
            }
            
            intensity_map = {
                0: ScanIntensity.SAFE,
                1: ScanIntensity.NORMAL, 
                2: ScanIntensity.AGGRESSIVE,
                3: ScanIntensity.PENETRATION
            }
            
            config = ScanConfig(
                targets=targets,
                scan_type=scan_type_map[self.scan_type_combo.currentText()],
                scan_intensity=intensity_map[intensity_index],  # –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
                timing_template=f"T{self.timing_combo.currentIndex()}",
                port_range=self.port_range_input.text().strip() or None,
                service_version=self.service_version_check.isChecked(),
                os_detection=self.os_detection_check.isChecked(),
                script_scan=self.script_scan_check.isChecked(),
                custom_command=self.custom_command_input.text().strip() or None
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.current_scan_id = self.scan_manager.submit_scan(config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_timer = QTimer()
            self.progress_timer.timeout.connect(self._update_progress_animation)
            self.progress_timer.start(500)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500–º—Å
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            intensity_level = self.intensity_combo.currentText().split(' - ')[0]
            self.log_output.append(f"üöÄ Started {intensity_level} scan: {self.current_scan_id}")
            self.log_output.append(f"üìã Targets: {', '.join(targets)}")
            self.log_output.append(f"üîß Type: {self.scan_type_combo.currentText()}")
            self.log_output.append(f"‚ö° Intensity: {intensity_level}\n")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            
        except Exception as e:
            self.log_output.append(f"‚ùå Error starting scan: {e}\n")
            QMessageBox.critical(self, "Error", f"Failed to start scan: {e}")
    
    def _update_progress_animation(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.progress_bar.isVisible():
            return
        
        current_value = self.progress_bar.value()
        if current_value < 90:  # –ù–µ –¥–æ—Ö–æ–¥–∏–º –¥–æ 100% –ø–æ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            new_value = current_value + 1
            if new_value > 90:
                new_value = 10  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏
            self.progress_bar.setValue(new_value)
    
    def _stop_scan(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.current_scan_id:
            self.scan_manager.stop_scan(self.current_scan_id)
            self.log_output.append(f"‚èπÔ∏è Stopping scan: {self.current_scan_id}\n")
            # –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú UI –°–†–ê–ó–£ - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_btn.setEnabled(False)
    
    def _reset_ui(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setVisible(False)
        if hasattr(self, 'progress_timer') and self.progress_timer:
            self.progress_timer.stop()
        self.current_scan_id = None
    
    @pyqtSlot(dict)
    def _on_scan_started(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = data.get('scan_id')
        if scan_id == self.current_scan_id:
            self.log_output.append(f"‚ö° Scan {scan_id} initialized...\n")
    
    @pyqtSlot(dict)
    def _on_scan_progress(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = data.get('scan_id')
        progress = data.get('progress', 0)
        status = data.get('status', '')
        
        if scan_id == self.current_scan_id:
            if progress >= 0:
                self.progress_bar.setValue(progress)
                if status:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if progress % 10 == 0 or progress == 100 or "error" in status.lower():
                        self.log_output.append(f"üìä Progress: {progress}% - {status}")
            else:
                self.log_output.append(f"‚ö†Ô∏è Error: {status}")
    
    @pyqtSlot(dict)
    def _on_scan_completed(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = data.get('scan_id')
        results = data.get('results')
        
        if scan_id == self.current_scan_id:
            if results and results.status == "completed":
                self.log_output.append(f"‚úÖ Scan {scan_id} completed successfully!")
                self.log_output.append(f"üìä Found {len(results.hosts)} host(s)")
                
                if not results.hosts:
                    self.log_output.append("‚ùå No hosts found or all hosts are down")
                    self.log_output.append("üí° Debug info: Check if targets are reachable")
                
                for host in results.hosts:
                    hostname = host.hostname if host.hostname else "N/A"
                    
                    self.log_output.append(f"  ‚Ä¢ Host: {host.ip} ({hostname}) - State: {host.state}")

                    # –í—ã–≤–æ–¥ –û–°
                    if host.os_family and host.os_family.lower() != "unknown":
                        self.log_output.append(f"    OS: {host.os_family}")
                    else:
                        self.log_output.append(f"    OS: Could not determine")
                    
                    # –í—ã–≤–æ–¥ –ø–æ—Ä—Ç–æ–≤
                    open_ports = [p for p in host.ports if p.state == "open"]
                    if open_ports:
                        self.log_output.append(f"    {len(open_ports)} Open Port(s):")
                        for port in open_ports:
                            service_info = f"{port.version}" if port.version else "N/A"
                            self.log_output.append(
                                f"      - {port.port}/{port.protocol} | Service: {port.service} | Version: {service_info}"
                            )
                    else:
                        self.log_output.append(f"    No open ports found")
                    
                    # –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–æ–≤
                    if host.scripts:
                        self.log_output.append(f"    üìù Scripts found: {len(host.scripts)}")
                        for script_id, script_output in host.scripts.items():
                            short_output = script_output[:100] + "..." if len(script_output) > 100 else script_output
                            self.log_output.append(f"      - {script_id}: {short_output}")
                    
                    self.log_output.append("")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ö–æ—Å—Ç–∞–º–∏
                    
            else:
                error_msg = "Unknown error"
                if results:
                    error_msg = results.status
                self.log_output.append(f"‚ùå Scan {scan_id} failed: {error_msg}")
                
            self.log_output.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            self._reset_ui()

    @pyqtSlot(dict)
    def _on_scan_stopped(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = data.get('scan_id')
        if scan_id == self.current_scan_id:
            self.log_output.append(f"‚úÖ Scan {scan_id} stopped successfully\n")
            self._reset_ui()


def create_tab(event_bus: EventBus, core_modules) -> QWidget:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        return ScanLauncherTab(event_bus, core_modules)
    except Exception as e:
        logging.error(f"Error creating Scan Launcher tab: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        error_widget = QWidget()
        layout = QVBoxLayout(error_widget)
        error_label = QLabel(f"Error loading Scan Launcher: {str(e)}")
        error_label.setWordWrap(True)
        layout.addWidget(error_label)
        return error_widget
