import logging
from PyQt6.QtCore import QObject, pyqtSignal
from typing import Any, Dict, List, Callable

class EventBus(QObject):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–µ–∂–º–æ–¥—É–ª—å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    scan_started = pyqtSignal(dict)  # {scan_id, config}
    scan_progress = pyqtSignal(dict)  # {scan_id, progress, status}
    scan_completed = pyqtSignal(dict)  # {scan_id, results}
    scan_paused = pyqtSignal(dict)    # {scan_id}
    scan_resumed = pyqtSignal(dict)   # {scan_id}  
    scan_stopped = pyqtSignal(dict)   # {scan_id}
    scan_failed = pyqtSignal(dict)    # {scan_id, error}
    
    # –°–æ–±—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö
    targets_updated = pyqtSignal(list)  # [targets]
    results_updated = pyqtSignal(dict)  # {scan_id, results}
    
    # –°–æ–±—ã—Ç–∏—è UI
    command_updated = pyqtSignal(str)   # nmap_command
    status_message = pyqtSignal(str)    # message
    notification = pyqtSignal(dict)     # {type, title, message}

    def __init__(self):
        super().__init__()
        self._listeners: Dict[str, List[Callable]] = {}
        self.logger = logging.getLogger('core.event_bus')
        self.logger.info("EventBus initialized")
    
    def subscribe(self, event_type: str, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        if event_type not in self._listeners:
            self._listeners[event_type] = []
        self._listeners[event_type].append(callback)
    
    def publish(self, event_type: str, data: Any = None):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if event_type in self._listeners:
            for callback in self._listeners[event_type]:
                try:
                    callback(data)
                except Exception as e:
                    self.logger.error(f"Error in event listener: {e}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —ç–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def emit_scan_started(self, scan_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = scan_data.get('scan_id', 'unknown')
        targets = scan_data.get('config', {}).get('targets', [])
        self.logger.info(f"üì¢ [EventBus] Emitting scan_started: {scan_id}, targets: {targets}")
        self.scan_started.emit(scan_data)
    
    def emit_scan_completed(self, scan_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = scan_data.get('scan_id', 'unknown')
        has_results = scan_data.get('results') is not None
        host_count = len(scan_data.get('results', {}).get('hosts', [])) if has_results else 0
        self.logger.info(f"üì¢ [EventBus] Emitting scan_completed: {scan_id}, has_results: {has_results}, hosts: {host_count}")
        self.scan_completed.emit(scan_data)
    
    def emit_scan_failed(self, scan_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = scan_data.get('scan_id', 'unknown')
        error = scan_data.get('error', 'unknown error')
        self.logger.info(f"üì¢ [EventBus] Emitting scan_failed: {scan_id}, error: {error}")
        self.scan_failed.emit(scan_data)
    
    def emit_results_updated(self, results_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        scan_id = results_data.get('scan_id', 'unknown')
        has_results = results_data.get('results') is not None
        host_count = len(results_data.get('results', {}).get('hosts', [])) if has_results else 0
        self.logger.info(f"üì¢ [EventBus] Emitting results_updated: {scan_id}, has_results: {has_results}, hosts: {host_count}")
        self.results_updated.emit(results_data)
    
    def emit_scan_progress(self, progress_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_id = progress_data.get('scan_id', 'unknown')
        progress = progress_data.get('progress', 0)
        status = progress_data.get('status', '')
        self.logger.debug(f"üì¢ [EventBus] Emitting scan_progress: {scan_id}, progress: {progress}%, status: {status}")
        self.scan_progress.emit(progress_data)
    
    def emit_targets_updated(self, targets: List[str]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
        self.logger.info(f"üì¢ [EventBus] Emitting targets_updated: {len(targets)} targets")
        self.targets_updated.emit(targets)
    
    def emit_status_message(self, message: str):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(f"üì¢ [EventBus] Emitting status_message: {message}")
        self.status_message.emit(message)
    
    def emit_notification(self, notification_data: Dict[str, Any]):
        """–≠–º–∏—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        title = notification_data.get('title', 'No title')
        self.logger.info(f"üì¢ [EventBus] Emitting notification: {title}")
        self.notification.emit(notification_data)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    def _log_signal_emit(self, signal_name: str, data: dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —ç–º–∏—Ç–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞"""
        scan_id = data.get('scan_id', 'unknown')
        self.logger.debug(f"üì¢ [EventBus] Signal emitted: {signal_name}, scan_id: {scan_id}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã —ç–º–∏—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def _emit_scan_started(self, data):
        self._log_signal_emit('scan_started', data)
        super().scan_started.emit(data)
    
    def _emit_scan_completed(self, data):
        self._log_signal_emit('scan_completed', data)
        super().scan_completed.emit(data)
    
    def _emit_results_updated(self, data):
        self._log_signal_emit('results_updated', data)
        super().results_updated.emit(data)
